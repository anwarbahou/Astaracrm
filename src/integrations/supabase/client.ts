// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Debug: Log environment variables
console.log('=== SUPABASE CLIENT DEBUG ===');
console.log('VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL);
console.log('VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? 'SET' : 'NOT SET');
console.log('NEXT_PUBLIC_SUPABASE_URL:', import.meta.env.NEXT_PUBLIC_SUPABASE_URL);
console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'SET' : 'NOT SET');
console.log('================================');

// Try both VITE_ and NEXT_PUBLIC_ prefixes
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || import.meta.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

console.log('Final SUPABASE_URL:', SUPABASE_URL);
console.log('Final SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY ? 'SET' : 'NOT SET');

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Missing Supabase environment variables!');
  console.error('Please ensure you have the following in your .env file:');
  console.error('VITE_SUPABASE_URL=your_project_url');
  console.error('VITE_SUPABASE_ANON_KEY=your_anon_key');
  console.error('Or with NEXT_PUBLIC_ prefix:');
  console.error('NEXT_PUBLIC_SUPABASE_URL=your_project_url');
  console.error('NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key');
  
  // In development, show a more helpful error
  if (import.meta.env.DEV) {
    console.error('üìù To fix this:');
    console.error('1. Create a .env file in your project root');
    console.error('2. Add your Supabase credentials');
    console.error('3. Restart your development server');
  }
  
  throw new Error('Missing Supabase environment variables. Please check your .env file.');
}

// Custom storage implementation to conditionally persist session
const customStorage = {
  getItem: (key: string): string | null => {
    try {
      // Prefer localStorage for persistent sessions, fallback to sessionStorage
      return localStorage.getItem(key) || sessionStorage.getItem(key);
    } catch (error) {
      console.error('Storage access error:', error);
      return null;
    }
  },
  setItem: (key: string, value: string): void => {
    try {
      // Session persistence is determined by the `persist` flag in sessionStorage
      if (sessionStorage.getItem('persist') === 'true') {
        localStorage.setItem(key, value);
      }
      sessionStorage.setItem(key, value);
    } catch (error) {
      console.error('Storage write error:', error);
    }
  },
  removeItem: (key: string): void => {
    try {
      localStorage.removeItem(key);
      sessionStorage.removeItem(key);
    } catch (error) {
      console.error('Storage remove error:', error);
    }
  },
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: customStorage,
    storageKey: 'supabase.auth.token',
    debug: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Debug any auth state changes
supabase.auth.onAuthStateChange((event, session) => {
  console.log('üîê Auth State Change:', {
    event,
    sessionExists: !!session,
    userId: session?.user?.id,
    timestamp: new Date().toISOString()
  });
});

export const SUPABASE_URL_EXPORT = SUPABASE_URL;
export const SUPABASE_ANON_KEY_EXPORT = SUPABASE_ANON_KEY;